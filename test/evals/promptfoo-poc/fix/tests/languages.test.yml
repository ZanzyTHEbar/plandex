- vars:
    filePath: "main.go"
    preBuildState: "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tfmt.Println(\"Hello, world!\")\n}\n"
    changes: |-
      1. Remove the import block as it's no longer needed.
      2. Change the message to 'Goodbye, world!'.
    incorrectlyUpdatedFile: "package main\n\n\nfunc main() {\n\tfmt.Println(\"Goodbye, world!\")\n}\n"
    problems: >-
      The file has several issues:

      1. The 'fmt' package import was removed but the 'fmt.Println' statement
      requires it, leading to an undefined package error.

      2. The 'fmt.Println' statement intended to update the message to
      'Goodbye, world!' but removed the required package to run successfully.
- vars:
    filePath: "main.py"
    preBuildState: "def initialize(params):\n\t# existing init code\n\treturn True\n"
    changes: >-
      1. Add error handling for parameter validation.

      2. Replace the placeholder comment with actual initialization code that
      sets up parameters based on input.
    incorrectlyUpdatedFile: "def initialize(params):\n\tif not params:\n\t\treturn False\n\t# Setup parameters based on input\n\treturn True\n"
    problems: >-
      The code attempts to improve by adding parameter validation and
      replacing a placeholder comment with a vague description of actual code
      that should initialize parameters. However, it doesn't include the
      actual necessary code for parameter setup, and the comment used as a
      placeholder does not represent the original initialization code.
- vars:
    filePath: "main.js"
    preBuildState: "class DatabaseConnector {\n\t// Existing methods\n}\n"
    changes: |-
      1. Add a method 'connect()' that establishes a database connection.
      2. Ensure the connection uses the newest security standards.
    incorrectlyUpdatedFile: "class DatabaseConnector {\n\t// connect() method code here\n}\n"
    problems: >-
      The update introduces a placeholder comment for the 'connect()' method
      instead of actual method implementation. It lacks the actual code needed
      to establish a database connection, especially with the latest security
      standards as intended.
- vars:
    filePath: "loop.go"
    preBuildState: |
      package main

      import "fmt"

      func main() {
          for i := 0; i < 5; i++ {
              fmt.Println(i)
          }
      }
    changes: Increase loop count from 5 to 10. Add a comment inside the loop.
    incorrectlyUpdatedFile: |
      package main

      import "fmt"

      func main() {
          for i := 0; i < 10; i++ {
              fmt.Println(i)
              // loop iteration
               }
      }
    problems: >-
      The loop counter was increased correctly, but a syntax error was
      introduced due to an extra space before the closing brace. Additionally,
      the added comment is too vague and does not follow best practices.
- vars:
    filePath: "add.go"
    preBuildState: |
      func add(a int, b int) int {
          return a + b
      }
    changes: >-
      Add error checking to the add function. Convert it to handle float types
      instead of int.
    incorrectlyUpdatedFile: |
      func add(a float64, b float64) float64 {
          if a == nil || b == nil {
              return 0, errors.New("Invalid input")
          }
          return a + b
      }
    problems: >-
      The function signature was correctly updated to use float64, but the
      error checking introduced does not compile in Go because 'nil'
      comparison is used instead of a proper validation, and the return type
      does not match the new expected return of a tuple containing float64 and
      error.
- vars:
    filePath: "dataprocessor.py"
    preBuildState: |
      class DataProcessor:
          def processData(self, data):
              # Implementation goes here
              pass

          def helperFunction(self):
              # Helper implementation
              pass
    changes: >-
      Implement the processData function to print each data item. Remove the
      helperFunction as it is no longer needed.
    incorrectlyUpdatedFile: |
      class DataProcessor:
          def processData(self, data):
              for item in data:
                  print(item)
          def helperFunction(self):
              # This should have been removed
              pass
    problems: >-
      The processData function was implemented correctly, but the
      helperFunction was not removed as required. Additionally, there's a
      missing newline before the definition of helperFunction which is
      violating PEP 8 style guidelines.
- vars:
    filePath: "print.go"
    preBuildState: |-
      package main

      import "fmt"

      func main() {
          fmt.Println("Hello, World!")
      }
    changes: >-
      Replace 'Hello, World!' with 'Goodbye, World!'. Add a comment above the
      print statement: '// print farewell message'
    incorrectlyUpdatedFile: |-
      package main

      import "fmt"

      func main() {
          // print farewell message
          fmt.Println("Goodbye, World!")
          fmt.Println("Hello, World!") // this should have been removed
      }
    problems: >-
      The update introduced a duplicate print statement of 'Hello, World!'
      that should have been replaced. The correct update should only contain
      one print statement 'Goodbye, World!', and the comment '// print
      farewell message' is correctly added but the old print statement was not
      removed.
- vars:
    filePath: "calculatesum.go"
    preBuildState: |-
      func calculateSum(numbers []int) int {
          sum := 0
          for _, num := range numbers {
              sum += num
          }
          return sum
      }
    changes: >-
      Add error checking for nil slice. Update the function to return 0 and an
      error if 'numbers' is nil.
    incorrectlyUpdatedFile: |-
      func calculateSum(numbers []int) int {
          if numbers == nil {
              return 0, errors.New("numbers cannot be nil")
          }
          sum := 0
          for _, num := range numbers {
              sum += num
          }
          return sum
      }
    problems: >-
      The return type of the function was not updated to accommodate the error
      return. The function signature remains returning only an int but
      attempts to return two values (int and error) when the input slice is
      nil. This introduces a mismatch in return types that prevents the code
      from compiling.
- vars:
    filePath: "globalconfig.go"
    preBuildState: |-
      var GlobalConfig = map[string]string{
          "path": "/default/path",
          "timeout": "30s",
      }

      func init() {
          // Load additional settings
          GlobalConfig["debug"] = "false"
      }
    changes: >-
      Update the default 'path' in GlobalConfig to '/new/default/path'. Add a
      comment above GlobalConfig declaration indicating it holds configuration
      settings.
    incorrectlyUpdatedFile: |-
      var GlobalConfig = map[string]string{
          // Configuration settings
          "path": "/new/default/path",
          "timeout": "30s",
      }

      func init() {
          // Load additional settings
          GlobalConfig["debug"] = "false"
          GlobalConfig["path"] = "/new/default/path" // duplicated update
      }
    problems: >-
      The 'path' setting in GlobalConfig was correctly updated but then
      duplicated incorrectly in the init function. This results in redundant
      code which does not align with the update instructions. Also, the
      comment '// Configuration settings' is correctly added.
- vars:
    filePath: "hello.go"
    preBuildState: "package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tfmt.Println(\"Hello, world!\")\n}"
    changes: Remove the import statement for fmt and the Println statement.
    incorrectlyUpdatedFile: |-
      package main

      func main() {

      }
    problems: >-
      The incorrect update removed the import statement and the Println
      statement but left an extra newline within the main function, which is
      not necessarily an error but could be considered stylistically
      unnecessary or non-idiomatic Go code. Additionally, comments indicating
      where code was removed were not added, which might be required for
      clarity in some projects.
- vars:
    filePath: "api.js"
    preBuildState: "function fetchData() {\n\tconst apiURL = 'https://api.example.com/data';\n\tfetch(apiURL)\n\t\t.then((response) => response.json())\n\t\t.then((data) => console.log(data))\n\t\t.catch((error) => console.error('Error:', error));\n}"
    changes: >-
      Update the fetchData function to include error handling for failed HTTP
      requests.
    incorrectlyUpdatedFile: "function fetchData() {\n\tconst apiURL = 'https://api.example.com/data';\n\tfetch(apiURL)\n\t\t.then((response) => {\n\t\t\tif (!response.ok) {\n\t\t\t\tthrow new Error('Network response was not ok');\n\t\t\t}\n\t\t\treturn response.json();\n\t\t})\n\t\t.then((data) => console.log(data))\n\t\t.catch((error) => console.error('Error:', error));\n// rest of the function..."
    problems: >-
      The updated file incorrectly forgets a closing bracket and includes a comment '// rest of the
      function...' which suggests more code follows, but it's actually a
      placeholder not replaced by existing code. It leaves the impression that
      part of the function might be missing or that the comment is
      inaccurately placed. Additionally, the added error handling within the
      fetch statement improves the function, but the comment issue could lead
      to misunderstandings about the code's completeness.
- vars:
    filePath: "HelloWorld.java"
    preBuildState: "public class HelloWorld {\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"Hello, World!\");\n\t}\n}"
    changes: >-
      Add a comment header above the class that describes the purpose of the
      HelloWorld class.
    incorrectlyUpdatedFile: "/*\n * This class demonstrates printing \"Hello, World!\" to the console.\n */\npublic class HelloWorld {\n\t// existing init code...\n\tpublic static void main(String[] args) {\n\t\tSystem.out.println(\"Hello, World!\");\n\t}\n\t// rest of your class..."
    problems: >-
      The updated file incorrectly includes placer comments like '// existing
      init code...' and '// rest of your class...' These comments are
      placeholders not replaced by actual code from the original file. Such
      comments could mislead developers into thinking there's additional
      initial setup code or more content within the class that's not present.
      These comments should be replaced with the exact code they're referring
      to if any, or removed if unnecessary.
- vars:
    filePath: "arithmetic.go"
    preBuildState: "// Simple Go program to perform arithmetic operations\n\npackage main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar a, b int = 4, 2\n\tfmt.Println(\"Sum:\", a+b)\n\tfmt.Println(\"Difference:\", a-b)\n\tfmt.Println(\"Product:\n\n\", a*b)\n\tfmt.Println(\"Quotient:\", a/b)\n}"
    changes: |-
      1. Fix the newline error in the Product print statement.
      2. Add a modulus operation print statement.
    incorrectlyUpdatedFile: "// Simple Go program to perform arithmetic operations\n\npackage main\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tvar a, b int = 4, 2\n\tfmt.Println(\"Sum:\", a+b)\n\tfmt.Println(\"Difference:\", a-b)\n\tfmt.Println(\"Product:\", a*b)// Incorrectly removed newline and added comment of the divisor operation\n\tfmt.Println(\"Quotient:\n\n\", a/b)\n\t// Need to add modulus operation\n}"
    problems: >-
      1. The import statement 'fmt' is duplicated and incorrectly positioned within the file.

      2. The newline error in the Product print statement was incorrectly fixed by removing the newline instead of correctly adjusting it.

      3. A comment indicating the need for a modulus operation was added but the operation itself was not implemented.

      4. An incorrect comment was added at the end of the Product line.
- vars:
    filePath: "index.html"
    preBuildState: "<!-- HTML template -->\n\n<!DOCTYPE html>\n<html>\n<head>\n\t<title>Page Title</title>\n</head>\n<body>\n\n\t<h1>This is a Heading</h1>\n\t<p>This is a paragraph.</p>\n\n</body>\n</html>"
    changes: |-
      1. Update the title of the HTML page to 'Updated Title'.
      2. Add a new paragraph below the existing one.
    incorrectlyUpdatedFile: "<!DOCTYPE html>\n<html>\n<head>\n\t<title>Updated Title</title>\n</head>\n<body>\n\n\t<h1>This is a Heading</h1>\n\t<p>This is a paragraph.</p>\n\t<p>New paragraph without ending tag.\n\n</body>\n</html>"
    problems: >-
      1. The title of the HTML page was updated correctly.

      2. A new paragraph was added but without the correct ending tag, leading
      to potential display issues in web browsers.

      3. No other syntax errors or missing declarations are present.
- vars:
    filePath: "age.js"
    preBuildState: "//JavaScript function to calculate age\n\nfunction calculateAge(birthYear) {\n\tconst currentYear = new Date().getFullYear();\n\treturn currentYear - birthYear;\n}\n\nconsole.log(calculateAge(1990));"
    changes: |-
      1. Add error handling to ensure 'birthYear' is not in the future.
      2. Ensure the function prints a message instead of returning the age.
    incorrectlyUpdatedFile: "function calculateAge(birthYear) {\n\tconst currentYear = new Date().getFullYear();\n\tif (birthYear > currentYear) {\n\t\tconsole.error(\"Birth year cannot be in the future.\");\n\t} else {\n\tconsole.log(currentYear - birthYear);\n}\n\nconsole.log(calculateAge(1990));"
    problems: >-
      1. The error handling logic for 'birthYear' being in the future has been
      added, but it does not prevent the rest of the function from executing.

      2. The console.log statement to print the age is always executed, even
      when the birthYear is in the future.

      3. The original function's return statement was replaced with a
      console.log, but the final console.log outside the function incorrectly
      remains, intending to demonstrate the function's usage.
