- vars:
    filePath: data_models.go
    preBuildInState: "package models \n\ntype User struct {\n\tID        string\n\tUsername  string\n\tEmail     string\n}\n\ntype Post struct {\n\tID      string\n\tContent string\n\tAuthor  string\n}"
    changes: "1. Add a `CreatedAt` timestamp field to both `User` and `Post` structs.\n2. Add a new struct `Comment` with fields `ID`, `Content`, `Author`, and `CreatedAt`.\n3. Update `Post` to include a slice of `Comment` references."
- vars:
    filePath: utils/sort_functions.go
    preBuildInState: |-
      package utils

      func sortIntegers(input []int) {
        // Assume this is a basic sorting function
      }

      func main() {
        values := []int{2, 3, 1, 4}
        sortIntegers(values)
        // Output should be a sorted array
      }
    changes: "1. Correct the sorting logic in `sortIntegers` function to actually sort the integers.\n2. Add a new function `printValues` to print the sorted array.\n3. Update `main` function to call `printValues` after sorting."
- vars:
    filePath: database/connection.go
    preBuildInState: |-
      package database

      import "database/sql"

      var db *sql.DB

      func init() {
        // Initialize database connection
      }

      func GetConnection() *sql.DB {
        return db
      }
    changes: "1. Update `init` function to include error handling and retry logic for database connection.\n2. Add logging for successful connection or failure in the `init` method.\n3. Provide a new function `CloseConnection` to properly close the database connection."
- vars:
    filePath: handlers/user_handler.go
    preBuildInState: |-
      package handlers

      import (
        "fmt"
        "net/http"
      )

      func UserSignup(w http.ResponseWriter, r *http.Request) {
        // Handles user signup
      }

      func UserLogin(w http.ResponseWriter, r *http.Request) {
        // Handles user login
      }
    changes: "1. Add input validation for `UserSignup` to check for valid email and password.\n2. Ensure `UserLogin` checks for correct user credentials and returns an error message on failure.\n3. Introduce rate limiting on both `UserSignup` and `UserLogin` to prevent abuse."
- vars:
    filePath: network_config.go
    preBuildInState: |-
      package network

      func InitializeNetwork() {
       // Initialize default network settings
      }

      func ConfigureIP(ipAddress string) {
       // Code to configure IP address
      }
    changes: "1. Replace the entire InitializeNetwork function to support dynamic network configurations based on environmental variables. \n2. Add a new function VerifyConnectivity that pings a set of predefined addresses to ensure network configuration is successful."
- vars:
    filePath: data_processor.py
    preBuildInState: |-
      import sys

      # Main processing function
      def processData(input):
          # TODO: Implement data processing
          pass

      if __name__ == '__main__':
          inputData = sys.argv[1]
          processData(inputData)
    changes: "1. Add error handling to processData to catch and log exceptions\n2. Update the # TODO comment with a more descriptive message. Add a new function to validate input data before processing."
- vars:
    filePath: user_management.js
    preBuildInState: |-
      class UserManager {
          constructor(users) {
              this.users = users;
          }

          addUser(user) {
              this.users.push(user);
          }

          findUser(username) {
              return this.users.find(u => u.username === username);
          }
      }
    changes: "1. Update the addUser method to prevent adding users with duplicate usernames. \n2. Modify the findUser method to log an error if the user is not found. \n3. Add a method to remove a user by username."
